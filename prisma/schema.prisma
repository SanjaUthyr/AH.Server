// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(uuid())
  fullName       String
  email          String     @unique
  password       String
  avatarUrl      String?
  cart           Cart?
  courses        Course[]   @relation("UserPurchasedCourse")
  wishlist       Wishlist[]
  createdCourses Course[]   @relation("UserCourse")
  Rating         Rating[]
  roles          Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum CourseStatus {
  PUBLISHED
  DRAFT
  PENDING
  REJECTED
}

enum CourseType {
  FREE
  PAID
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Wishlist {
  id String @id @default(uuid())

  course Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Cart {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id           String     @id @default(uuid())
  title        String
  bio          String
  description  String
  requirements String
  forWho       String
  price        Float
  languages    String[]
  level        String
  skills       String[]
  categories   Category[]

  imageUrl   String
  previewUrl String

  discount      Int?      @default(0)
  discountStart DateTime?
  discountEnd   DateTime?
  discountCodes String[]

  author   User?   @relation("UserCourse", fields: [authorId], references: [id])
  authorId String?

  students       User[]          @relation("UserPurchasedCourse")
  ratings        Rating[]
  courseContents CourseContent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart   Cart?   @relation(fields: [cartId], references: [id])
  cartId String?

  // wishlist   Wishlist? @relation(fields: [wishlistId], references: [id])
  // wishlistId String?

  Wishlist   Wishlist? @relation(fields: [wishlistId], references: [id])
  wishlistId String?
  // User       User?     @relation(fields: [userId], references: [id])
  // userId     String?
}

model Category {
  id   String @id @default(uuid())
  name String

  subCategory Category[] @relation("SubCategory")

  parent   Category? @relation("SubCategory", fields: [parentId], references: [id])
  parentId String?

  Course   Course? @relation(fields: [courseId], references: [id])
  courseId String?
}

// model SubCategory {
//   id   String @id @default(uuid())
//   name String

//   Category   Category @relation(fields: [categoryId], references: [id])
//   categoryId String
// }

model Rating {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  course    Course?  @relation(fields: [courseId], references: [id])
  courseId  String?
  rating    Int      @default(0)
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CourseContent {
  id       String    @id @default(uuid())
  course   Course?   @relation(fields: [courseId], references: [id])
  courseId String?
  lectures Lecture[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lecture {
  id            String           @id @default(uuid())
  courseId      String?
  title         String
  content       LectureContent[]
  estimatedTime String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ILectureContent ILectureContent[]
  CourseContent   CourseContent? @relation(fields: [courseContentId], references: [id])
  courseContentId String?
}

model LectureContent {
  id         String   @id @default(uuid())
  title      String?
  previewUrl String?
  time       String?
  content    String? //videoUrl | text
  Lecture    Lecture? @relation(fields: [lectureId], references: [id])
  lectureId  String?
}

// model Paging {
//   page     Int @default(1)
//   pageSize Int @default(10)
// }
